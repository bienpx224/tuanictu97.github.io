{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hà Anh Tuấn - Blog",
    "home_page_url": "https://tuanictu97.github.io/",
    "feed_url": "https://tuanictu97.github.io/feed.json",
    "description": "Hà Anh Tuấn - Blog",
    "icon": "https://tuanictu97.github.io/assets/images/apple-touch-icon.png",
    "favicon": "https://tuanictu97.github.io/assets/images/favicon.png",
    "expired": false,
    
    "author":  {
        "name": "Hà Anh Tuấn",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://tuanictu97.github.io/how-to-install-gitea-on-ubuntu-20-04/",
            "title": "How to Install Gitea on Ubuntu 20.04",
            "summary": null,
            "content_text": "Gitea is a fast and easy-to-use self-hosted git server written in Go. It includes a repository file editor, project issue tracking, user management, notifications, built-in wiki, and much more.Gitea is a lightweight application and can be installed on low-powered systems. If you are searching for an alternative to Gitlab with a much smaller memory footprint and you don’t need all the bells and whistles that Gitlab offers, then you should give a try to Gitea.This article explains how to install and configure Gitea on Ubuntu 20.04.PrerequisitesGitea supports SQLite, PostgreSQL , and MySQL /MariaDB as database backends.SQLite is only recommended for small installations. Larger installations should use MySQL or PostgreSQL.We’ll use SQLite as the database for Gitea. If SQLite is not installed on your Ubuntu system, install it by entering the following commands as sudo user :sudo apt updatesudo apt install sqlite3Installing GiteaGitea provides Docker images and can be installed from source, binary, and as a package. We’ll install Gitea from binary.Install GitThe first step is to install Git on your server:sudo apt updatesudo apt install gitVerify the installation by displaying the Git version:git --versionCreate a Git userCreate a new system user which will run the Gitea application by typing:sudo adduser \\   --system \\   --shell /bin/bash \\   --gecos 'Git Version Control' \\   --group \\   --disabled-password \\   --home /home/git \\   gitDownload Gitea binaryHead over to the Gitea Download page and download the latest binary for your architecture. At the time of writing, the latest version is 1.10.2. If there is a new version available, change the VERSION variable in the command below.Use wget to download the Gitea binary in the /tmp directory:VERSION=1.14.1sudo wget -O /tmp/gitea https://dl.gitea.io/gitea/${VERSION}/gitea-${VERSION}-linux-amd64You can run the gitea binary from any location. We’ll follow the convention and move the binary to the /usr/local/bin directory:sudo mv /tmp/gitea /usr/local/binsudo chmod +x /usr/local/bin/giteaRun the commands below to create the directories and set the required permissions and ownership :sudo mkdir -p /var/lib/gitea/{custom,data,log}sudo chown -R git:git /var/lib/gitea/sudo chmod -R 750 /var/lib/gitea/sudo mkdir /etc/giteasudo chown root:git /etc/giteasudo chmod 770 /etc/giteaRun gitea as a ServiceYou can run Gitea as service, using either systemd or supervisor. The steps below tested on Ubuntu 20.04, but those should work on any Linux distributions (with little modification).Using systemdWe’ll run Gitea as a systemd service.Download the sample systemd unit file to the /etc/systemd/system directory by typing:sudo wget https://raw.githubusercontent.com/go-gitea/gitea/main/contrib/systemd/gitea.service -P /etc/systemd/system/You don’t need to edit the file, it is configured to match our setup.Enable and start the Gitea service:sudo systemctl daemon-reloadsudo systemctl enable --now giteaVerify that Gitea is running:sudo systemctl status giteaUsing supervisorInstall supervisor by running below command in terminal:sudo apt install supervisorCreate a log dir for the supervisor logs:# assuming Gitea is installed in /home/git/gitea/mkdir /home/git/gitea/log/supervisorAppend the configuration from the sample supervisord config to /etc/supervisor/supervisord.conf.Using your favorite editor, change the user (git) and home (/home/git) settings to match the deployment environment. Change the PORT or remove the -p flag if default port is used.Lastly enable and start supervisor at boot:sudo systemctl enable supervisorsudo systemctl start supervisorIf you have systemd version 220 or later, you can enable and immediately start supervisor by:sudo systemctl enable supervisor --nowGood luck =)) !",
            "content_html": "<p>Gitea is a fast and easy-to-use self-hosted git server written in Go. It includes a repository file editor, project issue tracking, user management, notifications, built-in wiki, and much more.</p><p>Gitea is a lightweight application and can be installed on low-powered systems. If you are searching for an alternative to Gitlab with a much smaller memory footprint and you don’t need all the bells and whistles that Gitlab offers, then you should give a try to Gitea.This article explains how to install and configure Gitea on Ubuntu 20.04.</p><h2 id=\"prerequisites\">Prerequisites</h2><p>Gitea supports SQLite, PostgreSQL , and MySQL /MariaDB as database backends.</p><p>SQLite is only recommended for small installations. Larger installations should use MySQL or PostgreSQL.</p><p>We’ll use SQLite as the database for Gitea. If SQLite is not installed on your Ubuntu system, install it by entering the following commands as sudo user :</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>sqlite3</code></pre></div></div><h2 id=\"installing-gitea\">Installing Gitea</h2><p>Gitea provides Docker images and can be installed from source, binary, and as a package. We’ll install Gitea from binary.</p><h3 id=\"install-git\">Install Git</h3><p>The first step is to install Git on your server:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>git</code></pre></div></div><p>Verify the installation by displaying the Git version:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git <span class=\"nt\">--version</span></code></pre></div></div><h3 id=\"create-a-git-user\">Create a Git user</h3><p>Create a new system user which will run the Gitea application by typing:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>adduser <span class=\"se\">\\</span>   <span class=\"nt\">--system</span> <span class=\"se\">\\</span>   <span class=\"nt\">--shell</span> /bin/bash <span class=\"se\">\\</span>   <span class=\"nt\">--gecos</span> <span class=\"s1\">'Git Version Control'</span> <span class=\"se\">\\</span>   <span class=\"nt\">--group</span> <span class=\"se\">\\</span>   <span class=\"nt\">--disabled-password</span> <span class=\"se\">\\</span>   <span class=\"nt\">--home</span> /home/git <span class=\"se\">\\</span>   git</code></pre></div></div><h3 id=\"download-gitea-binary\">Download Gitea binary</h3><p>Head over to the Gitea Download page and download the latest binary for your architecture. At the time of writing, the latest version is 1.10.2. If there is a new version available, change the VERSION variable in the command below.Use wget to download the Gitea binary in the /tmp directory:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">VERSION</span><span class=\"o\">=</span>1.14.1<span class=\"nb\">sudo </span>wget <span class=\"nt\">-O</span> /tmp/gitea https://dl.gitea.io/gitea/<span class=\"k\">${</span><span class=\"nv\">VERSION</span><span class=\"k\">}</span>/gitea-<span class=\"k\">${</span><span class=\"nv\">VERSION</span><span class=\"k\">}</span><span class=\"nt\">-linux-amd64</span></code></pre></div></div><p>You can run the gitea binary from any location. We’ll follow the convention and move the binary to the /usr/local/bin directory:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo mv</span> /tmp/gitea /usr/local/bin<span class=\"nb\">sudo chmod</span> +x /usr/local/bin/gitea</code></pre></div></div><p>Run the commands below to create the directories and set the required permissions and ownership :</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo mkdir</span> <span class=\"nt\">-p</span> /var/lib/gitea/<span class=\"o\">{</span>custom,data,log<span class=\"o\">}</span><span class=\"nb\">sudo chown</span> <span class=\"nt\">-R</span> git:git /var/lib/gitea/<span class=\"nb\">sudo chmod</span> <span class=\"nt\">-R</span> 750 /var/lib/gitea/<span class=\"nb\">sudo mkdir</span> /etc/gitea<span class=\"nb\">sudo chown </span>root:git /etc/gitea<span class=\"nb\">sudo chmod </span>770 /etc/gitea</code></pre></div></div><h3 id=\"run-gitea-as-a-service\">Run gitea as a Service</h3><p>You can run Gitea as service, using either systemd or supervisor. The steps below tested on Ubuntu 20.04, but those should work on any Linux distributions (with little modification).</p><h4 id=\"using-systemd\">Using systemd</h4><p>We’ll run Gitea as a systemd service.</p><p>Download the sample systemd unit file to the /etc/systemd/system directory by typing:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>wget https://raw.githubusercontent.com/go-gitea/gitea/main/contrib/systemd/gitea.service <span class=\"nt\">-P</span> /etc/systemd/system/</code></pre></div></div><p>You don’t need to edit the file, it is configured to match our setup.Enable and start the Gitea service:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl daemon-reload<span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable</span> <span class=\"nt\">--now</span> gitea</code></pre></div></div><p>Verify that Gitea is running:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl status gitea</code></pre></div></div><h4 id=\"using-supervisor\">Using supervisor</h4><p>Install supervisor by running below command in terminal:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>supervisor</code></pre></div></div><p>Create a log dir for the supervisor logs:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># assuming Gitea is installed in /home/git/gitea/</span><span class=\"nb\">mkdir</span> /home/git/gitea/log/supervisor</code></pre></div></div><p>Append the configuration from the sample supervisord config to /etc/supervisor/supervisord.conf.</p><p>Using your favorite editor, change the user (git) and home (/home/git) settings to match the deployment environment. Change the PORT or remove the -p flag if default port is used.</p><p>Lastly enable and start supervisor at boot:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable </span>supervisor<span class=\"nb\">sudo </span>systemctl start supervisor</code></pre></div></div><p>If you have systemd version 220 or later, you can enable and immediately start supervisor by:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable </span>supervisor <span class=\"nt\">--now</span></code></pre></div></div><p>Good luck =)) !</p>",
            "url": "https://tuanictu97.github.io/how-to-install-gitea-on-ubuntu-20-04/",
            
            
            
            "tags": ["lorem","ipsum"],
            
            "date_published": "2021-02-09T03:00:00+03:00",
            "date_modified": "2021-02-09T03:00:00+03:00",
            
                "author": "tuanictu97"
            
        },
    
        {
            "id": "https://tuanictu97.github.io/how-to-set-up-a-reverse-proxy-step-by-steps-for-nginx-and-apache/",
            "title": "How to Set up a Reverse Proxy (Step-By-Steps for Nginx and Apache)",
            "summary": null,
            "content_text": "A reverse proxy sits in front of a web server and receives all the requests before they reach the origin server. It works similarly to a forward proxy, except in this case it’s the web server using the proxy rather than the user or client. Reverse proxies are typically used to enhance performance, security, and reliability of the web server.Try a free demoFor example, you can have a non-WordPress site hosted at example.com domain on Server A and have its blog running on WordPress at example.com/blog URL hosted on Server B. You can achieve this by adding a reverse proxy for the server hosting your primary site. You can configure the reverse proxy to redirect requests to the blog to a different server (e.g. a managed WordPress host like Kinsta).In this article, you’ll learn the basics of reverse proxy servers, how they work, what their major benefits are, and how you can use them to speed up and secure your WordPress site.What Is a Reverse Proxy?To understand what a reverse proxy server is, you need first to know its role and get familiar with all its related terms.When you browse the web normally by entering a domain name or clicking a link, your browser/device connects to the website’s server directly and starts downloading its resources.If you want to anonymize your IP address from the websites you visit, then you can use a proxy server to send all your requests to it first. It’ll forward your requests to the DNS resolver and then download the website’s resources from its origin server.Afterward, it’ll pass on those resources to your device. This is called a forward proxy.Reverse Proxy Server vs Forward Proxy ServerA reverse proxy server acts as a front for the origin server to maintain anonymity and enhance security, just like how a user/client can use a forward proxy to achieve the same. It ensures that no user or client communicates directly with the origin server.The difference between a forward proxy vs a reverse proxy is minor, but they work differently.Both can work together as there’s no overlap between their functioning. Typically, users/clients use a forward proxy, while origin servers use a reverse proxy.Since a server admin can control how the reverse proxy works, you can use it to enable many useful features.We’ll list all its benefits later in this post.Why Use a Reverse Proxy?Many businesses, especially large enterprises, use bespoke websites that are tailor-made to their unique needs and aren’t running on WordPress. Some examples include bank and insurance websites.In other cases, a business may host their site on an external service that doesn’t allow them to install any external software (e.g. WordPress). Usually, these are small to mid-sized retailers using an ecommerce platform such as Shopify.Since WordPress has robust CMS features, many businesses, including large enterprises with bespoke websites, may prefer to host their blogs using WordPress.One way to get around this problem is to install WordPress on the main website’s subdomain and structure the navigation menus such that users can switch easily between the main website and the blog.Since subdomains behave as a unique domain, it can affect your site’s SEO. Even though Google treats both subdomains and subdirectories equally, it takes more effort to optimize a website for search engine rankings if it’s hosted on a subdomain than if it’s hosted in a subdirectory.Google has reaffirmed that it treats both subdomains and subdirectories equally, but some SEO experts disagree with it. And even if it doesn’t affect the site’s SEO, a site hosted in a subdirectory is simply easier to maintain.That’s why you can use a reverse proxy to redirect requests to the site’s blog hosted on a separate server.",
            "content_html": "<p>A reverse proxy sits in front of a web server and receives all the requests before they reach the origin server. It works similarly to a forward proxy, except in this case it’s the web server using the proxy rather than the user or client. Reverse proxies are typically used to enhance performance, security, and reliability of the web server.</p><p>Try a free demoFor example, you can have a non-WordPress site hosted at example.com domain on Server A and have its blog running on WordPress at example.com/blog URL hosted on Server B. You can achieve this by adding a reverse proxy for the server hosting your primary site. You can configure the reverse proxy to redirect requests to the blog to a different server (e.g. a managed WordPress host like Kinsta).</p><p>In this article, you’ll learn the basics of reverse proxy servers, how they work, what their major benefits are, and how you can use them to speed up and secure your WordPress site.</p><h2 id=\"what-is-a-reverse-proxy\">What Is a Reverse Proxy?</h2><p>To understand what a reverse proxy server is, you need first to know its role and get familiar with all its related terms.</p><p>When you browse the web normally by entering a domain name or clicking a link, your browser/device connects to the website’s server directly and starts downloading its resources.</p><p><img src=\"/assets/images/how-internet-browsing-works-normally.png\" alt=\"How Internet Browsing Works Normally\" /></p><p>If you want to anonymize your IP address from the websites you visit, then you can use a proxy server to send all your requests to it first. It’ll forward your requests to the DNS resolver and then download the website’s resources from its origin server.</p><p>Afterward, it’ll pass on those resources to your device. This is called a forward proxy.</p><p><img src=\"/assets/images/how-a-forward-proxy-server-works.png\" alt=\"How a Fozrward Proxy Server Works\" /></p><h2 id=\"reverse-proxy-server-vs-forward-proxy-server\">Reverse Proxy Server vs Forward Proxy Server</h2><p>A reverse proxy server acts as a front for the origin server to maintain anonymity and enhance security, just like how a user/client can use a forward proxy to achieve the same. It ensures that no user or client communicates directly with the origin server.</p><p><img src=\"/assets/images/how-a-reverse-proxy-server-works.png\" alt=\"How a Reverse Proxy Server Works\" /></p><p>The difference between a forward proxy vs a reverse proxy is minor, but they work differently.</p><p>Both can work together as there’s no overlap between their functioning. Typically, users/clients use a forward proxy, while origin servers use a reverse proxy.</p><p><img src=\"/assets/images/how-a-reverse-proxy-server-works.png\" alt=\"How a Reverse Proxy Server Works\" /></p><p>Since a server admin can control how the reverse proxy works, you can use it to enable many useful features.</p><p>We’ll list all its benefits later in this post.</p><h2 id=\"why-use-a-reverse-proxy\">Why Use a Reverse Proxy?</h2><p>Many businesses, especially large enterprises, use bespoke websites that are tailor-made to their unique needs and aren’t running on WordPress. Some examples include bank and insurance websites.</p><p>In other cases, a business may host their site on an external service that doesn’t allow them to install any external software (e.g. WordPress). Usually, these are small to mid-sized retailers using an ecommerce platform such as Shopify.</p><p>Since WordPress has robust CMS features, many businesses, including large enterprises with bespoke websites, may prefer to host their blogs using WordPress.</p><p>One way to get around this problem is to install WordPress on the main website’s subdomain and structure the navigation menus such that users can switch easily between the main website and the blog.</p><p><img src=\"/assets/images/how-a-reverse-proxy-server-works.png\" alt=\"Subdomain vs Subdirectory for WordPress Blogs\" /></p><p>Since subdomains behave as a unique domain, it can affect your site’s SEO. Even though Google treats both subdomains and subdirectories equally, it takes more effort to optimize a website for search engine rankings if it’s hosted on a subdomain than if it’s hosted in a subdirectory.</p><p>Google has reaffirmed that it treats both subdomains and subdirectories equally, but some SEO experts disagree with it. And even if it doesn’t affect the site’s SEO, a site hosted in a subdirectory is simply easier to maintain.</p><p>That’s why you can use a reverse proxy to redirect requests to the site’s blog hosted on a separate server.</p>",
            "url": "https://tuanictu97.github.io/how-to-set-up-a-reverse-proxy-step-by-steps-for-nginx-and-apache/",
            
            
            
            "tags": ["lorem","ipsum"],
            
            "date_published": "2019-01-01T03:00:00+03:00",
            "date_modified": "2019-01-01T03:00:00+03:00",
            
                "author": "tuanictu97"
            
        }
    
    ]
}